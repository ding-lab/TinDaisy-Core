# Filter merged VCF file to exclude snv calls generated by just one caller.
#   Updated to take into account mutect, strelka indels
# Specifically, we exclude calls where "set" INFO field is any of these:
#      strelka,varscan,mutect,sindel,varindel,pindel
#
# Usage:
#   bash run_merged_filter.sh input.vcf output.vcf [args ...]
# args are zero or more optional arguments:
#   --bypass_merge and --bypass will skip merge filter
#   --debug and --debug_merge will print out debug info to STDERR
# If output.vcf is -, write to stdout

VCF=$1; shift
OUT=$1; shift
XARG="$@"  # https://stackoverflow.com/questions/1537673/how-do-i-forward-parameters-to-other-command-in-bash-script

if [ -z $OUT ]; then
    >&2 echo Output VCF not specified.  Quitting.
    exit 1
fi

export PYTHONPATH="/usr/local/somaticwrapper/vcf_filters:$PYTHONPATH"

# parse XARG to catch bypass options.
# --bypass and --bypass_merge will both bypass filter
# similar logic for --debug and --debug_merge
# if this is not a bypass arg then add it to both filters
for ARG in $XARG; do
    if [ "$ARG" == "--bypass_merge" ]; then
        MERGE_ARG="$MERGE_ARG --bypass"
    elif [ "$ARG" == "--bypass" ]; then
        MERGE_ARG="$MERGE_ARG --bypass"
    elif [ "$ARG" == "--debug_merge" ]; then
        MERGE_ARG="$MERGE_ARG --debug"
    elif [ "$ARG" == "--debug" ]; then
        MERGE_ARG="$MERGE_ARG --debug"
    else
        MERGE_ARG="$MERGE_ARG $ARG"
    fi
done

MERGE_FILTER="vcf_filter.py --no-filtered --local-script merge_filter.py"  # filter module
# MERGE_FILTER_ARGS="merge --exclude strelka,varscan $MERGE_ARG " 

# exclude variants reported by just one caller
MERGE_FILTER_ARGS="merge --exclude strelka,varscan,mutect,sindel,varindel,pindel $MERGE_ARG " 

if [ $OUT == '-' ]; then
    $MERGE_FILTER $VCF $MERGE_FILTER_ARGS 
else
    $MERGE_FILTER $VCF $MERGE_FILTER_ARGS > $OUT
fi

# Evaluate return value for chain of pipes; see https://stackoverflow.com/questions/90418/exit-shell-script-based-on-process-exit-code
rcs=${PIPESTATUS[*]};
for rc in ${rcs}; do
    if [[ $rc != 0 ]]; then
        >&2 echo Fatal error.  Exiting.
        exit $rc;
    fi;
done

>&2 echo Written to $OUT

